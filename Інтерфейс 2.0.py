import tkinter as tk
from tkinter import messagebox, filedialog
import json

def calculate_box_volume(Vas, box_type="sealed", Qts_fixed=0.4, Qtc=0.707):
    """–û–±—á–∏—Å–ª–µ–Ω–Ω—è –æ–±'—î–º—É –∫–æ—Ä–ø—É—Å—É –≤ –ª—ñ—Ç—Ä–∞—Ö –±–µ–∑ –≤–≤–µ–¥–µ–Ω–Ω—è Qts"""
    if box_type == "sealed":
        if Qtc**2 / Qts_fixed**2 - 1 <= 0:
            raise ValueError("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è Qtc —ñ Qts.")
        Vb = Vas / ((Qtc**2 / Qts_fixed**2) - 1)
    elif box_type == "bass_reflex":
        Vb = 20 * Vas * Qts_fixed**3.3
    elif box_type == "bandpass":
        sealed_part = Vas / ((Qtc**2 / Qts_fixed**2) - 1) if Qtc**2 / Qts_fixed**2 - 1 > 0 else Vas * 0.7
        reflex_part = 20 * Vas * Qts_fixed**3.3
        Vb = sealed_part + reflex_part
    else:
        raise ValueError("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∫–æ—Ä–ø—É—Å—É.")
    return round(Vb, 2)

def calculate_dimensions(volume_liters, material_thickness_mm, woofer_diameter_mm):
    volume_m3 = volume_liters / 1000
    width = 0.25
    depth = 0.25
    height = volume_m3 / (width * depth)

    # –í—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –Ω–∏–∑—å–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –¥–∏–Ω–∞–º—ñ–∫–∞ (–≤—É—Ñ–µ—Ä–∞)
    h_in = max(height * 1000, woofer_diameter_mm + 20)  # –≤–∏—Å–æ—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–æ—é –∑–∞ –¥—ñ–∞–º–µ—Ç—Ä –¥–∏–Ω–∞–º—ñ–∫–∞ + –∑–∞–ø–∞—Å
    w_in = width * 1000
    d_in = max(depth * 1000, woofer_diameter_mm * 0.4 + 30)  # –≥–ª–∏–±–∏–Ω–∞ –∑ –∑–∞–ø–∞—Å–æ–º

    # –í—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç–æ–≤—â–∏–Ω—É –º–∞—Ç–µ—Ä—ñ–∞–ª—É
    t = material_thickness_mm
    h_out = h_in + 2 * t
    w_out = w_in + 2 * t
    d_out = d_in + 2 * t

    return {
        "internal": {"height": int(h_in), "width": int(w_in), "depth": int(d_in)},
        "external": {"height": int(h_out), "width": int(w_out), "depth": int(d_out)}
    }

def on_calculate():
    try:
        Fs = float(entry_fs.get())
        Vas = float(entry_vas.get())
        D = float(entry_d.get())
        Tweeter_D = float(entry_tweeter.get())  # –¥—ñ–∞–º–µ—Ç—Ä —Ç–≤—ñ—Ç–µ—Ä–∞
        material_thickness = float(entry_thickness.get())
        Qts = 0.4  # —Ñ—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∫–æ—Ä–ø—É—Å—ñ–≤
        box_type_translation = {
            "–ó–∞–∫—Ä–∏—Ç–∏–π": "sealed",
            "–§–∞–∑–æ—ñ–Ω–≤–µ—Ä—Ç–æ—Ä": "bass_reflex",
            "–ë–∞–Ω–¥–ø–∞—Å": "bandpass"
        }
        box_type_key = box_type_translation.get(box_type_var.get(), "bass_reflex")  # –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –§–Ü

        vol_sealed = calculate_box_volume(Vas, box_type_key, Qts)
        vol_br = calculate_box_volume(Vas, "bass_reflex", Qts)
        vol_bp = calculate_box_volume(Vas, "bandpass", Qts)

        dims_sealed = calculate_dimensions(vol_sealed, material_thickness, D)
        dims_br = calculate_dimensions(vol_br, material_thickness, D)
        dims_bp = calculate_dimensions(vol_bp, material_thickness, D)

        result_var.set(
            f"### –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É:\n\n"
            f"1. –ó–∞–∫—Ä–∏—Ç–∏–π –∫–æ—Ä–ø—É—Å:\n"
            f"  –û–±'—î–º: {vol_sealed} –ª\n"
            f"  –†–æ–∑–º—ñ—Ä–∏ (–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ): {dims_sealed['internal']['height']}x{dims_sealed['internal']['width']}x{dims_sealed['internal']['depth']} –º–º\n"
            f"  –†–æ–∑–º—ñ—Ä–∏ (–∑–æ–≤–Ω—ñ—à–Ω—ñ): {dims_sealed['external']['height']}x{dims_sealed['external']['width']}x{dims_sealed['external']['depth']} –º–º\n\n"
            f"2. –§–∞–∑–æ—ñ–Ω–≤–µ—Ä—Ç–æ—Ä (Bass Reflex):\n"
            f"  –û–±'—î–º: {vol_br} –ª\n"
            f"  –†–æ–∑–º—ñ—Ä–∏ (–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ): {dims_br['internal']['height']}x{dims_br['internal']['width']}x{dims_br['internal']['depth']} –º–º\n"
            f"  –†–æ–∑–º—ñ—Ä–∏ (–∑–æ–≤–Ω—ñ—à–Ω—ñ): {dims_br['external']['height']}x{dims_br['external']['width']}x{dims_br['external']['depth']} –º–º\n\n"
            f"3. –ë–∞–Ω–¥–ø–∞—Å:\n"
            f"  –û–±'—î–º: {vol_bp} –ª\n"
            f"  –†–æ–∑–º—ñ—Ä–∏ (–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ): {dims_bp['internal']['height']}x{dims_bp['internal']['width']}x{dims_bp['internal']['depth']} –º–º\n"
            f"  –†–æ–∑–º—ñ—Ä–∏ (–∑–æ–≤–Ω—ñ—à–Ω—ñ): {dims_bp['external']['height']}x{dims_bp['external']['width']}x{dims_bp['external']['depth']} –º–º"
        )

        global export_data
        export_data = {
            "driver_parameters": {
                "Fs": Fs,
                "Vas": Vas,
                "Qts (fixed)": Qts,
                "D (woofer diameter)": D,
                "D (tweeter diameter)": Tweeter_D
            },
            "sealed_box": {
                "volume_liters": vol_sealed,
                "dimensions_mm": dims_sealed
            },
            "bass_reflex": {
                "volume_liters": vol_br,
                "dimensions_mm": dims_br
            },
            "bandpass": {
                "volume_liters": vol_bp,
                "dimensions_mm": dims_bp
            }
        }

    except ValueError as e:
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ: {e}")

def on_export():
    if not export_data:
        messagebox.showinfo("–£–≤–∞–≥–∞", "–°–ø–æ—á–∞—Ç–∫—É –∑—Ä–æ–±—ñ—Ç—å —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫.")
        return

    file_path = filedialog.asksaveasfilename(defaultextension=".json", filetypes=[("JSON —Ñ–∞–π–ª–∏", "*.json")])
    if file_path:
        with open(file_path, 'w') as f:
            json.dump(export_data, f, indent=4)
        messagebox.showinfo("–ï–∫—Å–ø–æ—Ä—Ç", "–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")

# GUI
root = tk.Tk()
root.title("–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ–±‚Äô—î–º—É –∫–æ—Ä–ø—É—Å—É –∫–æ–ª–æ–Ω–∫–∏")

# –í–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
tk.Label(root, text="1. Fs (–ì—Ü) ‚Äî —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –¥–∏–Ω–∞–º—ñ–∫–∞:").grid(row=0, column=0)
tk.Label(root, text="2. Vas (–ª) ‚Äî –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç–Ω–∏–π –æ–±'—î–º –ø–æ–≤—ñ—Ç—Ä—è –¥–∏–Ω–∞–º—ñ–∫–∞:").grid(row=1, column=0)
tk.Label(root, text="3. –î—ñ–∞–º–µ—Ç—Ä –Ω–∏–∑—å–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –¥–∏–Ω–∞–º—ñ–∫–∞ (–º–º):").grid(row=2, column=0)
tk.Label(root, text="4. –î—ñ–∞–º–µ—Ç—Ä —Ç–≤—ñ—Ç–µ—Ä–∞ (–º–º):").grid(row=3, column=0)
tk.Label(root, text="5. –¢–æ–≤—â–∏–Ω–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª—É (–º–º) –¥–ª—è –∫–æ—Ä–ø—É—Å—É:").grid(row=4, column=0)

entry_fs = tk.Entry(root)
entry_vas = tk.Entry(root)
entry_d = tk.Entry(root)
entry_tweeter = tk.Entry(root)
entry_thickness = tk.Entry(root)
entry_thickness.insert(0, "18")  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–æ–≤—â–∏–Ω–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª—É

entry_fs.grid(row=0, column=1)
entry_vas.grid(row=1, column=1)
entry_d.grid(row=2, column=1)
entry_tweeter.grid(row=3, column=1)
entry_thickness.grid(row=4, column=1)

# –í–∏–±—ñ—Ä —Ç–∏–ø—É –∫–æ—Ä–ø—É—Å—É
box_type_var = tk.StringVar(value="–§–∞–∑–æ—ñ–Ω–≤–µ—Ä—Ç–æ—Ä")
tk.Label(root, text="6. –¢–∏–ø –∫–æ—Ä–ø—É—Å—É:").grid(row=5, column=0)
tk.OptionMenu(root, box_type_var, "–ó–∞–∫—Ä–∏—Ç–∏–π", "–§–∞–∑–æ—ñ–Ω–≤–µ—Ä—Ç–æ—Ä", "–ë–∞–Ω–¥–ø–∞—Å").grid(row=5, column=1)

# –ö–Ω–æ–ø–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
tk.Button(root, text="üîç –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –æ–±'—î–º —ñ —Ä–æ–∑–º—ñ—Ä–∏", command=on_calculate).grid(row=6, column=0, columnspan=2, pady=10)

# –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
result_var = tk.StringVar()
tk.Label(root, textvariable=result_var, justify="left", wraplength=600).grid(row=7, column=0, columnspan=3, padx=10, sticky="w")

# –ö–Ω–æ–ø–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É
tk.Button(root, text="üíæ –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ .json", command=on_export).grid(row=8, column=0, columnspan=2, pady=10)

export_data = None
root.mainloop()
